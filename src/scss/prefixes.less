// BEGIN FLEX BOX

#reasanik() {
  .display-flex() {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
  }

  .display-inline-flex() {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }

  .flex-direction(@value: row) {
    & when not (@value = column) and not (@value = column-reverse) {
      -webkit-box-orient: horizontal;
    }

    & when (@value = column)// or (@value = column-reverse)
		 {
      -webkit-box-orient: vertical;
    }

    & when not (@value = row-reverse) and not (@value = column-reverse) {
      -webkit-box-direction: normal;
    }

    & when (@value = row-reverse)// or (@value = column-reverse)
		 {
      -webkit-box-direction: reverse;
    }

    -webkit-flex-direction: @value;
    -ms-flex-direction: @value;
    flex-direction: @value;
  }

  .flex-wrap(@value) {
    -webkit-flex-wrap: @value;
    -ms-flex-wrap: @value;
    flex-wrap: @value;
  }

  .flex-flow(@value) {
    -webkit-flex-flow: @value;
    -ms-flex-flow: @value;
    flex-flow: @value;
  }

  .justify-content(@value: flex-start) {
    & when (@value = flex-start) {
      -webkit-box-pack: start;
      -ms-flex-pack: start;
    }

    & when (@value = flex-end) {
      -webkit-box-pack: end;
      -ms-flex-pack: end;
    }

    & when (@value = space-around) {
      -ms-flex-pack: distribute;
    }

    & when (@value = space-between) {
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
    }

    & when (@value = center)// or (@value = initial) or (@value = inherit)
		 {
      -webkit-box-pack: @value;
      -ms-flex-pack: @value;
    }

    -webkit-justify-content: @value;
    justify-content: @value;
  }

  .align-items(@value: flex-start) {
    & when (@value = flex-start) {
      -webkit-box-align: start;
      -ms-flex-align: start;
    }

    & when (@value = flex-end) {
      -webkit-box-align: end;
      -ms-flex-align: end;
    }

    & when not (@value = flex-start) and not (@value = flex-end) {
      -webkit-box-align: @value;
      -ms-flex-align: @value;
    }

    -webkit-align-items: @value;
    -ms-grid-row-align: @value;
    align-items: @value;
  }

  .align-content(@value) {
    & when (@value = flex-start) {
      -ms-flex-line-pack: start;
    }

    & when (@value = flex-end) {
      -ms-flex-line-pack: end;
    }

    & when (@value = space-around) {
      -ms-flex-line-pack: distribute;
    }

    & when (@value = space-between) {
      -ms-flex-line-pack: justify;
    }

    & when (@value = center)// or (@value = stretch) or (@value = initial) or (@value = inherit)
		 {
      -ms-flex-line-pack: @value;
    }

    -webkit-align-content: @value;
    align-content: @value;
  }

  .align-self(@value) {
    -webkit-align-self: @value;
    -ms-flex-item-align: @value;
    align-self: @value;
  }

  .order(@value: 0) {
    & when (isnumber(@value)) {
      -webkit-box-ordinal-group: @value+1;
    }

    -webkit-order: @value;
    -ms-flex-order: @value;
    order: @value;
  }

  .flex-grow(@value, @important: "") {
    -webkit-box-flex: @value e(@important);
    -webkit-flex-grow: @value e(@important);
    -ms-flex-positive: @value e(@important);
    flex-grow: @value e(@important);
  }

  .flex-shrink(@value, @important: "") {
    -webkit-flex-shrink: @value e(@important);
    -ms-flex-negative: @value e(@important);
    flex-shrink: @value e(@important);
  }

  // END FLEX BOX

  .box-sizing(@value, @important: "") {
    -webkit-box-sizing: @value e(@important);
    -moz-box-sizing: @value e(@important);
    box-sizing: @value e(@important);
  }

  .user-select(@value) {
    -webkit-user-select: @value;
    -moz-user-select: @value;
    -ms-user-select: @value;
    user-select: @value;
  }

  .background-size(@value, @important: "") {
    -webkit-background-size: @value e(@important);
    -moz-background-size: @value e(@important);
    background-size: @value e(@important);
  }

  .border-radius(@value) {
    -webkit-border-radius: e(@value);
    border-radius: e(@value);
  }

  .transform(@value) {
    & when not (isstring(@value)) {
      -webkit-transform: @value;
      -ms-transform: @value;
      transform: @value;
    }

    & when (isstring(@value)) {
      -webkit-transform: e(@value);
      -ms-transform: e(@value);
      transform: e(@value);
    }
  }

  .transition(@value) {
    & when not (isstring(@value)) {
      -webkit-transition: @value;
      transition: @value;
    }

    & when (isstring(@value)) {
      -webkit-transition: e(@value);
      transition: e(@value);
    }
  }

  .linear-gradient(@gradient, @rest: false) {
    & when not (isstring(@rest)) and not (@rest) {
      background: -webkit-linear-gradient(e(@gradient));
      background: linear-gradient(e(@gradient));
    }

    & when (isstring(@rest)) {
      background: -webkit-linear-gradient(e(@gradient)), e(@rest);
      background: linear-gradient(e(@gradient)), e(@rest);
    }
  }

  .filter(@value) {
    -webkit-filter: @value;
    filter: @value;
  }
}
